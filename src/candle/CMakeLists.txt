#/*******************************************************************************
#* Author : Damir Bakiev *
#* Version : na *
#* Date : 11 November 2021 *
#* Website : na *
#* Copyright : Damir Bakiev 2016-2022 *
#* License: *
#* Use, modification & distribution is subject to Boost Software License Ver 1. *
#* http://www.boost.org/LICENSE_1_0.txt *
#********************************************************************************/
cmake_minimum_required(VERSION 3.20)

project(Candle VERSION 0.8 LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIRECTORY})

#if(ANDROID)
# set(ANDROID_PACKAGE_SOURCE_DIR " android")
# if (ANDROID_ABI STREQUAL "armeabi-v7a")
# set(ANDROID_EXTRA_LIBS
#  path/to/libcrypto.so
#  path/to/libssl.so)
# endif()
#endif()

string(TIMESTAMP DT "%d.%m.%Y - %H:%M:%S")# [<format string>] [UTC])
add_definitions(-DBUILD_DATE="${DT}")

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Gui Widgets LinguistTools)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS
    Core
    Gui
    LinguistTools
    OpenGL
    PrintSupport
    Script
    SerialPort
    Widgets
)


# WINDOWS APP ICON
#set(APP_ICON_RESOURCE_WINDOWS " myapp.rc")
file(GLOB_RECURSE HEADERS  *.h)
file(GLOB_RECURSE SOURCES  *.cpp)
file(GLOB_RECURSE QRC_FILES  *.qrc)
file(GLOB_RECURSE TS_FILES_  *.ts)
file(GLOB_RECURSE UIS  *.ui)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    find_package(Qt${QT_VERSION_MAJOR} COMPONENTS OpenGLWidgets REQUIRED)
endif()

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt6_add_resources(RESOURCES ${QRC_FILES})
else()
    qt5_add_resources(RESOURCES ${QRC_FILES})
endif()

include_directories(
    ../designerplugins/customwidgetsplugin
)

if (WIN32)
    # //set(app_icon_resource_windows " resources/photosurface.rc")
    # //qt_add_executable(photosurface main.cpp ${app_icon_resource_windows})
    add_definitions(-DWINDOWS)
    find_package(Qt${QT_VERSION_MAJOR} COMPONENTS WinExtras REQUIRED)

    # QT += winextras
    # QMAKE_LFLAGS += "-Wl,--large-address-aware"
    # QMAKE_CXXFLAGS_DEBUG += -g3 -pg
    # QMAKE_LFLAGS_DEBUG += -pg -lgmon
elseif (APPLE)
    # # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # # generated by CMake. This variable contains the .icns file name,
    # # without the path.
    # set(MACOSX_BUNDLE_ICON_FILE photosurface.icns)

    # # And the following tells CMake where to find and install the file itself.
    # set(app_icon_macos " resources/photosurface.icns")
    # set_source_files_properties(${app_icon_macos} PROPERTIES
    # MACOSX_PACKAGE_LOCATION "Resources")

    # qt_add_executable(photosurface MACOSX_BUNDLE main.cpp ${app_icon_macos})

elseif (UNIX)
    add_definitions(-DUNIX)
    #add_compile_options("-Wl,-rpath,\'\$$ORIGIN/libs\'")
endif()


set(PROJECT_SOURCES
    # ${APP_ICON_RESOURCE_WINDOWS}
    ${HEADERS}
    ${QRC_FILES}
    ${RESOURCES}
    ${SOURCES}
    ${TS_FILES_}
    ${UIS}
)

#set_source_files_properties(${TS_FILES_} PROPERTIES OUTPUT_LOCATION "${CMAKE_CURRENT_BINARY_DIR}/translations")
#qt_add_lrelease(${PROJECT_NAME} TS_FILES ${TS_FILES_})
##                [NO_TARGET_DEPENDENCY]
##                [NO_GLOBAL_TARGET]
##                [QM_FILES_OUTPUT_VARIABLE variable-name]
##                [OPTIONS ...])
#qt_add_lrelease(${PROJECT_NAME}
#    TS_FILES ${TS_FILES_}
#    QM_FILES_OUTPUT_VARIABLE QM_FILES)
#install(FILES ${QM_FILES} DESTINATION "translations")



if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(${PROJECT_NAME} MANUAL_FINALIZATION ${PROJECT_SOURCES})
    qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES_})
else()
    add_executable(${PROJECT_NAME} ${PROJECT_SOURCES})
    qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES_})
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE
    customwidgets
    Qt${QT_VERSION_MAJOR}::Core
    Qt${QT_VERSION_MAJOR}::Gui
    Qt${QT_VERSION_MAJOR}::PrintSupport
    Qt${QT_VERSION_MAJOR}::Script
    Qt${QT_VERSION_MAJOR}::SerialPort
    Qt${QT_VERSION_MAJOR}::Widgets
)

if (WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE customwidgets Qt${QT_VERSION_MAJOR}::WinExtras)
endif()

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    target_link_libraries(${PROJECT_NAME} PRIVATE Qt${QT_VERSION_MAJOR}::OpenGLWidgets)
else()
    target_link_libraries(${PROJECT_NAME} PRIVATE Qt${QT_VERSION_MAJOR}::OpenGL)
endif()

#set_target_properties(${PROJECT_NAME} PROPERTIES
#    MACOSX_BUNDLE_GUI_IDENTIFIER xr.ggeasy.com
#    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
#    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
#    MACOSX_BUNDLE TRUE
#    WIN32_EXECUTABLE TRUE
#)

#install(TARGETS ${PROJECT_NAME}
#    BUNDLE DESTINATION .
#    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
#)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(${PROJECT_NAME})
endif()

if(WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE setupapi)
    # windeployqt
    set(CMAKE_INSTALL_UCRT_LIBRARIES TRUE)
    get_target_property(_QMAKE_EXECUTABLE Qt${QT_VERSION_MAJOR}::qmake IMPORTED_LOCATION)
    get_filename_component(_QT_BIN_DIR "${_QMAKE_EXECUTABLE}" DIRECTORY)
    find_program(WINDEPLOYQT_EXECUTABLE windeployqt HINTS "${_QT_BIN_DIR}")
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND "${CMAKE_COMMAND}" -E
        env PATH="${_QT_BIN_DIR}" "${WINDEPLOYQT_EXECUTABLE}"
        --verbose 1
        --no-compiler-runtime
        \"$<TARGET_FILE:${PROJECT_NAME}>\"
        COMMENT "Deploying Qt..."
    )

#    find_program(LRELEASE_EXECUTABLE lrelease HINTS "${_QT_BIN_DIR}")
#    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
#        COMMAND "${CMAKE_COMMAND}" -E
#        env PATH="${_QT_BIN_DIR}" "${LRELEASE_EXECUTABLE}"
#        ${TS_FILES_}
#        COMMENT "Deploying Qt..."
#    )
#    foreach(QM_FILE ${TS_FILES_})
#        message(WARNING ${QM_FILE})
#        string(REPLACE ".ts" ".qm" TS_FILE ${QM_FILE})
#        message(WARNING ${TS_FILE})
#        file(COPY ${TS_FILE} DESTINATION ${OUTPUT_DIRECTORY}/translations)
#        #file(COPY_FILE ${QM_FILE} ${OUTPUT_DIRECTORY}/translations/${FILE_NAME} RESULT res ONLY_IF_DIFFERENT)
#    endforeach()

elseif (UNIX)#LINUX

    find_program(Q_MAKE_EXE qmake)

    find_program(CQT_EXE cqtdeployer)

    if(NOT EXISTS ${CQT_EXE})
        message("the cqtdeployer not exits please install the cqtdeployer and run cmake again!")
        return()
    endif()

    add_custom_target(
        deploy
        COMMAND cqtdeployer clear -bin ${CURENT_PROJECT} -qmake ${Q_MAKE_EXE} -libDir ${PROJECT_SOURCE_DIR} -qmlDir ${PROJECT_SOURCE_DIR} -recursiveDepth 5
        COMMENT "Deploy: cqtdeployer clear -bin ${CURENT_PROJECT} -qmake ${Q_MAKE_EXE} -libDir ${PROJECT_SOURCE_DIR} -qmlDir ${PROJECT_SOURCE_DIR} -recursiveDepth 5"
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    )


# add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
# COMMAND "${CMAKE_COMMAND}" -E
# env PATH="${_QT_BIN_DIR}" "cqtdeployer"
# -bin $<TARGET_FILE:${PROJECT_NAME}>
# -qmake ${QT_QMAKE_EXECUTABLE}
# qif
# COMMENT "Deploying Qt..."
# )

# cqtdeployer -bin myApp -qmake path/to/Qt/5.x.x/build/bin/qmake -qmlDir path/to/my/qml/files/dir qif
endif()


#file(GLOB_RECURSE PLUGIN_FILES *.ui *.qm *.ts *js *png)
#foreach(FILE  ${PLUGIN_FILES})
#    string(REPLACE ${SOURCE_DIR} "" OUTPUT_FILE ${FILE})
#    set(OUTPUT_FILE ${OUTPUT_DIR}${OUTPUT_FILE})
#    get_filename_component(OUTPUT_DIRECTORY2 ${OUTPUT_FILE} DIRECTORY)
#    file(MAKE_DIRECTORY ${OUTPUT_DIRECTORY2})
#    file(COPY_FILE ${FILE} ${OUTPUT_FILE} RESULT COPY_RESULT ONLY_IF_DIFFERENT)
#endforeach()


#if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
# set_target_properties(${PROJECT_NAME} PROPERTIES
# LINK_FLAGS_DEBUG "/SUBSYSTEM:CONSOLE"
# LINK_FLAGS_RELWITHDEBINFO "/SUBSYSTEM:CONSOLE"
# LINK_FLAGS_RELEASE "/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup"
# LINK_FLAGS_MINSIZEREL "/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup"
# )
#endif()


